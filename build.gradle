
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'findbugs'

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
version = "1.0"
group= "com.kaitoyuuki.chatotchatbot" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "chatotchatbot"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.10.2-12.18.1.2095"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20160518"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

}

srcCompat = JavaVersion.VERSION_1_8
targetCompat = JavaVersion.VERSION_1_8

repositories {
    jcenter()
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile ('net.dv8tion:JDA:2.2.1_353') {
        // we don't want junit as runtime dependency, it's unneeded
        exclude group: 'junit', module: 'junit'

        // remove the exludes to include audio libs
        exclude group: 'jflac', module: 'jflac'
        exclude group: 'net.sourceforge.jaadec', module: 'jaad'
        exclude group: 'org.tritonus', module: 'tritonus-dsp'
        exclude group: 'com.googlecode.soundlibs', module: 'tritonus-share'
        exclude group: 'com.googlecode.soundlibs', module: 'mp3spi'
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

shadowJar {
    classifier = ''
    relocate 'com.mashape.unirest', 'com.github.duke605.dce.relocate.com.mashape.unirest'
    relocate 'com.neovisionaries.ws.client', 'com.github.duke605.dce.relocate.com.neovisionaries.ws.client'
    relocate 'com.sun.jna', 'com.github.duke605.dce.relocate.com.sun.jna'
    relocate 'net.dv8tion.jda', 'com.github.duke605.dce.relocate.net.dv8tion.jda'
    relocate 'org.apache.commons.codec', 'com.github.duke605.dce.relocate.org.apache.commons.codec'
    relocate 'org.apache.commons.lang3', 'com.github.duke605.dce.relocate.org.apache.commons.lang3'
    relocate 'org.json', 'com.github.duke605.dce.relocate.org.json'
    relocate 'org.apache.http', 'com.github.duke605.dce.relocate.org.apache.http'
    relocate 'org.apache.commons.logging', 'com.github.duke605.dce.relocate.org.apache.commons.logging'
    relocate 'com.iwebpp.crypto', 'com.github.duke605.dce.relocate.com.iwebpp.crypto'
    relocate 'com.mixpanel', 'com.github.duke605.dce.relocate.com.mixpanel'

    // remove the exludes to include files required for audio
    exclude 'natives/'
    exclude 'tomp2p/opuswrapper/'
    exclude 'org/tritonus/'

    // uncomment the following lines to also relocate the audio libs if included
    // relocate 'javax.sound', 'com.github.duke605.dce.relocate.javax.sound'
    // relocate 'tomp2p.opuswrapper', 'com.github.duke605.dce.relocate.tomp2p.opuswrapper'
    // relocate 'net.sourceforge.jaad', 'com.github.duke605.dce.relocate.net.sourceforge.jaad'
    // relocate 'javazoom', 'com.github.duke605.dce.relocate.javazoom'
    // relocate 'org.kc7bfi.jflac', 'com.github.duke605.dce.relocate.org.kc7bfi.jflac'
    // relocate 'org.tritonus', 'com.github.duke605.dce.relocate.org.tritonus'
}

jar {
    dependsOn shadowJar
    enabled = false
}

artifacts {
    archives shadowJar
}

idea { module { inheritOutputDirs = true } }
